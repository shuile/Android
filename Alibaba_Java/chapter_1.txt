一、编程规约
	(一)命名风格
		1、代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。
		2、代码中的而命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。
			说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，纯拼音命名方式更要避免采用。
			正例：renminbi/alibaba/taobao/youku/hangzhou等国际通用的名称，可视为英文。
		3、类名使用UpperCamelCase风格，但以下情形例外：DO/BO/DTO/VO/AO/PO/UID等。
		4、方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase风格，必须遵从驼峰形式。
		5、常用命名全部大写，单词间用下划线隔开，力求语义表达完整清除，不要嫌名字长。
		6、抽象类命名使用Abstract或Base开头；异常类命名使用Exception结尾；测试类命名以它要测试的类的名称开始，以Test结尾。
		7、类型与中括号紧挨相连来表示数组。
		8、POJO类中布尔类型变量都不要加is前缀，否则部分框架解析会引起序列化错误。
			说明：在本文MySQL规约中的建表约定第一条，表达是与否的值采用is_xxx的命名方式，所以，需要在<resultMap>设置从is_xxx到xxx的映射关系。
			反例：定义为基本数据类型Boolean isDeleted的属性，它的方法也是isDeleted()，RPC框架在返乡解析的时候，"误以为"对应的属性名称是deleted，导致属性获取不到，进而抛出异常。
		9、包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。
			正例：应用工具类包名为com.alibaba.ai.util、类型为MessageUtils
		10、强制在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可读性降低。
			说明：子类、父类成员变量名相同，即使是public类型的变量也是能够通过编译，而局部变量在同一方法内的不同代码块中命名也是合法的，但是要避免使用。对于非setter/getter的参数名称也要避免与成员变量名称相同。
		11、杜绝完全不规范的缩写，避免望文不知义。
			反例：AbstractClass"缩写"命名成AbsClass；condition"缩写"命名成condi，此类随意缩写严重降低了代码的可阅读性。
		12、为了达到代码自解释的目标，任何自定义变成元素在命名时，使用尽量完整的单词组合来表达其意。
		13、在常量与变量的命名时，表示类型的名称放在结尾，以提升辨识度。
			正例：startTime/workQueue/nameList/TERMINATED_THREAD_COUNT
		14、如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。
			说明：将涉及模式体现在名字中，有利于阅读者快速理解架构设计理念。
			正例：public class OrderFactory;/ public class Login Proxy;/ public class ResourceObserver;
		15、接口类中的方法和属性不要加任何修饰符号(public也不要加)，保持代码的简洁性，并加上有效的Javadoc注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。
		16、接口类和实现类的命名有两套规则：
			a. 对于Service和DAO类，基于SOA的理念，暴露出来的服务一定是接口，内部的实现类用Impl的后缀与接口区别。
				正例：CacheServiceImpl实现CacheService接口。
			b. 如果是形容能力的接口名称，取对应的形容词为接口名(通常是-able的形容词)。
		17、枚举类名带上Enum后缀，枚举成员名称需要大写，单词间用下划线隔开。
			说明：枚举其实就是特殊的类，域成员均为常量，且构造方法被默认强制私有。
		18、各层命名规约：
			a. Service/DAO层方法命名规约
				1) 获取单个对象的方法用get做前缀。
				2) 获取多个对象的方法用list做前缀，复数形式结尾，如：listObjects。
				3) 获取统计值的方法用count做前缀。
				4) 插入的方法用save/insert做前缀。
				5) 删除的方法用remove/delete做前缀。
				6) 修改的方法用update做前缀。
			b. 领域模型命名规约
				1) 数据对象：xxxDO，xxx即为数据表明。
				2) 数据传输对象：xxxDTO，xxx为业务领域相关的名称。
				3) 展示对象：xxxVO，xxx一般为网页名称。
				4) POJO是DO/DTO/BO/VO的统称，禁止命名成xxxPOJO。

	(二)常量定义
		1、不允许任何魔法值(即未经预先定义的常量)直接出现在代码中。
			反例：String key = "Id#taobao_" + tradeId;
			cache.put(key, value);
		2、在long或者Long赋值时，数值后使用大写的L，不能是小写的l，小写容易跟数字1混淆，造成误解。
			说明：Long a = 2l; 写的是数字21，还是Long型的2.
		3、不要使用一个常量类维护所有常量，要按长两功能进行分类，分开维护。
			说明：大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解和维护。
			正例：缓存相关常量放在CacheConsts下；系统配置相关常量放在类ConfigConsts下。
		4、常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。
			a. 跨应用共享常量：放置在二方库中，通常是client.jar中的constant目录下。
			b. 应用内共享常量：放置在一方库中，通常是子模块中的constant目录下。
			c. 子工程内部共享常量：即在当前自工程的constant目录下。
			d. 包内共享常量：即在当前包下单独的constant目录下。
			e. 类内共享常量：直接在类内部private static final 定义。
		5、如果变量值仅在一个固定范围内变化用enum类型来定义。
			说明：如果存在名称之外的延伸属性应使用enum类型，下面正例中的数字就是延伸信息，表示一年中的第一个季节。
			正例：
				public enum SeasonEnum {
					SPRING(1), SUMMER(2), AUTUMN(3), WINTER(4);

					private int seq;
					SeasonEnum(int seq) {
					this.seq = seq;
					}

					public int getSeq() {
						return seq;
					}
				}

	(三)代码格式
		1、如果是大括号内为空，则简洁地携程{}即可，大括号中间无需换行和空格；如果是非空代码块则：
			a. 左大括号钱不换行。
			b. 左大括号后换行。
			c. 右大括号前换行。
			d. 右大括号后还有else等代码则不换行；表示终止的右大括号后必须换行。
		2、左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格；而左大括号前需要空格。
		3、if/for/while/switch/do等保留字与括号之间都必须加空格。
		4、任何二目、三目运算符的左右两边都需要加一个空格。
			说明：运算符包括赋值运算符=、逻辑运算符&&、加减乘除符号等。
		5、采用4个空格缩进。禁止使用tab字符。
			说明：如果使用tab缩进，必须设置1个tab为4个空格。IDEA设置tab为4个人空格时，请勿勾选Use tab character；而在eclipse中，必须勾选insert spaces for tabs。
		6、注释的双斜线与注释内容之间有且仅有一个空格。
		7、在进行类型强制转换时，右括号与强制转换值之间不需要任何空格隔开。
		8、单行字符限制不超过120个，超出需要换行，换行时遵循如下原则：
			a. 第二行相对第一行缩进4个空格，从第三行开始，不再继续缩进。
			b. 运算符与下文一起换行。
			c. 方法调用的点符号与下文一起换行。
			d. 方法调用中的多个参数需要换行，在逗号后进行。
			e. 在括号前不要换行。
		9、方法参数在定义和传入时，多个参数逗号后边必须加空格。
		10、IDE的text file encoding设置为UTF-8；IDE中文件的换行符使用Unix格式，不要使用Windows格式。
		11、单个方法的总行数不超过80行。
			说明：除注释之外的方法签名、左右大括号、方法内代码、空行、回车及任何不可见字符的总行数不超过80行。
		12、没有必要增加若干空格来使变量的赋值等号与上一行对应位置的等号对齐。
		13、不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。
			说明：任何情形，没有必要插入多个空行进行隔开。

	(四)OOP规约
		1、避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。
		2、所有的覆写方法，必须加@Override注解。
			说明：getObject()与get0bject()的问题。一个是字母的O，一个是数字的0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。
		3、相同参数类型，相同业务含义，才可以使用Java的可变参数，避免使用Object。
			说明：可变参数必须放置在参数列表的最后。
		4、外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated注解，并清晰地说明采用的新接口或者新服务是什么。
		5、不能使用过时的类或方法。
			说明：Java.net.URLDecoder中的方法decode(String encoeeStr)这个方法已经过时，应该使用双参数decode(String source, String encode)。接口提供方既然明确是过时接口，那么有业务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。
		6、Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。
			正例："test".equals(object)
			说明：推荐使用java.util.Object#equals(JDK7引入的工具类)
		７、所有整型包装类对象之间值的比较，全部使用ｅｑｕａｌｓ方法比较。
			说明：对于Integer var = ?在-128~127范围内的赋值，Integer对象是IntegerCache.cahce产生，会复用已有对象，这个区间内的Integer值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用equals方法进行判断。
		8、浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用equals来判断。
			说明：浮点数采用"尾数+阶码"的编码方式，类似于科学计数法的"有效数字+指数"的表示方式。二进制无法精确表示大部分的十进制小数，具体原理参考《码出高效》。
			反例：
				float a = 1.0f - 0.9f;
				float b = 0.9f - 0.8f;
				if (a == b) {
					// 预期进入此代码快，执行其他业务逻辑
					// 但事实上a==b的结果为false
				}

				Float x = Float.valueOf(a);
				Float y = Float.valueOf(b);
				if (x.equals(y)) {
					// 预期进入此代码快，执行其他业务逻辑
					// 但事实上equals的结果为false
				}
			正例：
			a. 指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的。
				float a = 1.0f - 0.9f;
				float b = 0.9f - 0.8f;
				float diff = 1e-6f;
				if (Math.abs(a - b) < diff) {
					System.out.println("true");
				}
			b. 使用BigDecimal来定义值，再进行浮点数的运算操作。
				BigDecimal a = new BigDecimal("1.0");
				BigDecimal b = new BigDecimal("0.9");
				BigDecimal c = new BigDecimal("0.8");

				BigDecimal x = a.subtract(b);
				BigDecimal y = b.subtract(c);

				if (x.equals(y)) {
					System.out.println("true");
				}
		9、定义数据对象DO类时，属性类型要与数据库字段类型相匹配。
			正例：数据库字段的bigint必须与雷属性的Long类型相对应。
			反例：某个案例的数据表id字段定义类型bigint unsigned，实际类对象属性为Integer，随着id越来越大，超过Integer的表示范围而溢出成为负数。
		10、为了防止精度损失，禁止使用构造方法BigDecimal(double)的方式把double值转化为BigDecimal对象。
			说明：BigDecimal(double)存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。如：BigDecimal g = new BigDecimal(0.1f);实际存储值为：0.10000000149
			正例：
				优先推荐入参为String的构造方法，或使用BigDecimal的valueOf方法，此方法内部其实执行了Double的toString，而Double的toString按double的实际能表达的精度对尾数进行了截断。
				BigDecimal recommend1 = new BigDecimal("0.1");
				BigDecimal remommend2 = new BigDecimal.valueOf(0.1);
		11、关于基本数据类型与包装数据类型的使用标准如下：
			a. 所有的POJO类属性必须使用包装类型数据。
			b. RPC方法的返回值和参数必须使用包装数据类型。
			c. 所有的局部变量使用基本数据类型。
			说明：POJO类属性没有初值是提醒使用者在需要使用时，必须自己显示地进行赋值，任何NPE问题，或者入库检查，都由使用者来保证。
			正例：数据库的查询可能是null，因为自动拆箱，用基本数据类型街接收有NPE风险。
		12、定义DO/DTO/VO等POJO类时，不要设定任何属性默认值。
		13、序列化类新增属性时，请不要修改serialVersionUID字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改serialVersionUID值。
			说明：注意serialVersionUID不一致会抛出序列化运行时异常。
		14、构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在init方法中。
		15、POJO类必须写toString方法。
			说明：在方法执行抛出异常时，可以直接调用POJO的toString方法打印其属性值，便于排查问题。
		16、禁止在POJO类中，同时存在对应属性xxx的isXxx()和getXxx()方法。
			说明：框架在调用属性xxx的提取方法时，并不能确定哪一个方法一定是被优先调用到。
		17、使用索引访问String的split方法得到的数组时，需要最后一个分隔符后有无内容的检查，否则会抛IndexOutBoundsException的风险。
			说明：
				String str = "a,b,c,,";
				String[] ary = str.split(",");
				// 预期大于3，结果是3
				Sysytem.out,println(ary.length);
		18、当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于下一条。
		19、类内方法定义的顺序依次是：共有方法或保护方法 > 私有方法 > gettter / setter方法。
			说明：共有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是"模板设计模式"下的和新方法；而私有方法外部一般需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有Service和DAO的getter/setter方法放在类体最后。
		20、setter方法中，参数名称与类成员变量名称一致，this.成员名 = 参数名。在getter/setter方法中，不要增加业务逻辑，增加排查问题的难度。
		21、循环体内，字符串的连接方式，使用StringBuilder的append方法进行扩展。
			说明：下例中，反编译出的字节码文件显示每次循环都会new出一个StringBuilder对象，然后进行append操作，最后通过toString方法返回String对象，造成内存资源浪费。
		22、final可以声明类、成员变量、方法、以及本地变量，下列情况使用final关键字：
			a. 不允许被继承的类，如：String类。
			b. 不允许修改引用的域对象。
			c. 不允许被覆写的方法，如：POJO类的setter方法。
			d. 不允许运行过程中重新赋值的局部变量。
			e. 避免上下文重复使用一个变量，使用final可以强制重新定义一个变量，方便更好地进行重构。
		23、慎用Object的clone方法来拷贝对象。
			说明：对象clone方法默认是浅拷贝，若想实现深拷贝需覆写clone方法实现域对象的深度遍历式拷贝。
		24、类成员与方法访问控制从严：
			a. 如果不允许外部直接通过new来创建对象，那么构造方法必须是private。
			b. 工具类不允许有public或default沟槽方法。
			c. 类非static成员变量并且与子类共享，必须是protected。
			d. 类非static成员变量并且仅在本类使用，必须是private。
			e. 类static成员变量如果仅在本类使用，必须是private。
			f. 若是static成员变量，考虑是否为final。
			g. 类成员方法只提供类内部调用，必须是private。
			h. 类成员方法只对继承类公开，那么限制为protected。
			说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。

	(五)集合处理
		1、关于hashCode和equals的处理，遵循如下规则：
			a. 只要覆写equals，就必须覆写hashCode。
			b. 因为Set存储的是不重复的对象，依据hashCode和equals进行判断，所以Set存储的对象必须覆写这两个方法。
			c. 如果自定义对象作为Map的键，那么必须覆写hashCode和equals。
			说明：String已覆写hashCode和equals方法，所以我们可以愉快地使用String对象作为key来使用。
		2、ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException异常，即：java.util.RandomAccessSubList cannot be cast to java.util.ArraList。
			说明：subList返回的是ArrList的内部类SubList，并不是ArrayList而是ArrayList的一个视图，对于SubList子列表的所有操作最终会反映到原列表上。
		3、使用Map的方法keySet()/values()/entrySet()返回集合时，不可以对其进行添加元素操作，否则会抛出UnsupportedOperationException异常。
		4、Collections类返回的对象，如：emptyList()/singletonList()等都是immutable list，不可对其进行添加或者删除元素的操作。
		5、在subList场景中，高度注意对原集合元素的增加或删除，均会导致子列表的遍历、增加、删除产生ConcurrentModificationException异常。
		6、使用集合专属组的方法，必须使用集合的toArray(T[] array)，传入的是类型完全一致、长度为0的空数组。
			说明：使用toArray带参方法，数组空间大小的length：
				a. 等于0，动态创建与size相同的数组，性能最好。
				b. 大于0但小于size，重新创建大小等于size的数组，增加GC负担。
				c. 等于size，在高并发情况下，数组创建完成之后，size正在变大的情况下，负面影响与上相同。
				d. 大于size，空间浪费，且在size处插入null值，存在NPE隐患。
		7、在使用Collection接口任何实现类的addAll()方法时，都要对输入的集合参数进行NPE判断。
			说明：在ArrayList#addAll方法的第一行代码即Object[] a = c.toArray();其中c为输入集合参数，如果为null，则直接抛出异常。
		8、使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合的方法，它的add/remove/clear方法会抛出UnsupportedModificationException异常。
			说明：asList的返回对象是一个Arrays内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。
				String[] str = new String[] {"yang", "hao"};
				List list = Arrays.asList(str);
				第一种情况：list.add("yangguanbao");运行时异常。
				第二种情况：str[0] = "changed";也会随之修改，反之亦然。
		9、泛型通配符<? extends T>来接收返回的数据，此写法的泛型集合不能使用add方法，而<? super T>不能使用get方法，作为借口调用赋值时容易出错。
			说明：扩展说一下PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内容的，适合用<? extends T>。第二、经常往里插入的，适合用<? super T>
		10、在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行instance of判断，避免抛出ClassCastException异常。
			说明：毕竟泛型是在JDK5后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。
		11、不要在foreach循环里进行元素的remove/add操作。remove元素请使用Iterator方式，如果并发操作，需要对Iterator对象加锁。
		12、在JDK7版本及以上，Comparator实现类要满足如下三个条件，不然Arrays.sort，Collection.sort会抛IllegalArgumentEception异常。
			说明：三个条件如下	
				a. x，y的比较结果和y，x的比较结果相反。
				b. x > y, y > z, 则x > z。
				c. x = y，则x，z比较结果和y，z比较结果相同。
		13、集合泛型定义时，在JDK7及以上，使用diamond语法或全省略。
			说明：菱形泛型，即diamond，直接使用<>来指代前边已经制定的类型。
		14、集合初始化时，制定集合初始值大小。
			说明：HashMap使用HashMap(int initialCapacity)初始化。
			正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1.注意负载因子(即loader factor)默认为0.75，如果暂时无法确定初始值大小，请设置为16(即默认值)。
			反例：HashMap需要设置1024个元素，由于没有设置容量初试大小，随着元素不断增加，容量7次呗迫扩大，resize需要重建hash表，严重影响性能。
		15、使用entrySet遍历Map类集合KV，而不是keySet方式进行遍历。
			说明：keySet其实是遍历了2次，一次是转为Iterator对象，另一次是从hashMap中取出key所对应的value。而entrySet只是遍历了一次就把key和value都放到了entry中，效率更高。如果是JDK8，使用Map.forEach方法。
			正例：values()返回的是V值集合，是一个list集合对象；keySet()返回的是K值集合，是一个Set集合对象；entrySet()返回的是K-V值组合集合。
		16、高度注意Map类集合K/V不能存储null值的情况，如下表格：
			集合类				Key 				Value 				Super 				说明
			Hashtable 			不允许为null			不允许为null			Dictionary			线程安全
			ConCurrentHashMap 	不允许为null			不允许为null			AbstractMap			锁分段技术(JDK8:CAS)
			TreeMap				不允许为null 		允许为null			AbstractMap			线程不安全
			HashMap 			允许为null 			允许为null 			AbstractMap			线程不安全
			反例：由于HashMap的干扰，很多人认为ConcurrentHashMap是可以置入null值，而事实上，存储null值时会抛出NPE异常。
		17、合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。
			说明：有序性是指变量的结果是按某种比较规则依次排列的。稳定性是指集合每次遍历的元素次序是一定。如：ArrayList是order/unsort; HashMap是unorder/unsort; TreeMap是order/sort。
		18、利用Set元素唯一的特性，可以快速对一个集合进行去重操作，避免使用List的contains方法进行遍历、对比、去重操作。

	(六)并发处理
		1、获取单例对象需要保证线程安全，其中的方法也要保证线程安全。
			说明：资源驱动类、工具类、单例工厂类需要注意。
		2、创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。
			正例：自定义线程工厂，并且根据外部特征进行分组，比如机房信息。
				public class UserThreadFactory implements ThreadFactory {
					private final String namePrefix;
					private final AtomicInteger nextId = new AtomicInteger(1);

					// 定义线程名称，在jstack问题排查时，非常有帮助
					UserThreadFactory(String whatFeaturOfGroup) {
						namePrefix = "From UserThreadFactory's " + whatFeaturOfGroup + "-Worker-";
					}

					@Override
					public Thread new Thread(Runnable task) {
						String name = namePrefix + nextId.getAndIncrement();
						Thread thread = new Thread(null, task, name, 0, false);
						System.out.println(thread.getName());
						return thread;
					}
				}
		3、线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。
			说明：线程池的好处是创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者"过度切换"的问题。
		4、线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。
			说明：Executors返回的线程池对象的弊端如下：
				a. FixedThreadPool和SingleThreadPool：
					允许的请求队列长度为Integer.MAX_VLAUE，可能会堆积大量的请求，从而导致OOM。
				b. CachedThreadPool：
					允许创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。
		5、SimpleDateFormat是线程不安全的类，一般不要定义为static变量，如果定义为static，必须加锁，或者使用DateUtils工具类。
			正例：注意线程安全，使用DateUtils。亦推荐如下处理：
				private static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() {
					@Override
					protected DateFormat initialValue() {
						return new SimpleDateFormat("yyyy-MM-dd");
					}
				};
			说明：如果是JDK8的应用，可以使用Instant代替Date，LocalDateTime代替Calendar，DateTimeFormatter代替SimpleDateFormat，官方给出的解释：simple beautiful strong immutable thread-safe。
		6、必须回收自定义的ThreadLocal变量，尤其是线程池场景下，线程经常会被复用，如果不清理自定义的ThreadLocal变量，可能会影响后续业务逻辑和造成内存泄漏等问题。尽量在代理中使用try-finally块进行回收。
			正例：
				objectThreadLocal.set(userInfo);
				try {
					// ...
				} finall {
					objectThreadLocal.remove();
				}
		7、高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能锁对象，既不要用类锁。
			说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码中调用RPC方法。
		8、对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。
			说明：线程一需要对表A、B、C依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是A、B、C，否则可能出现死锁。
		9、在使用阻塞等待取锁的方式中，必须在try代码块之外，并且在加锁方法与try代码块之间没有任何抛出异常的方法调用，避免加锁成功后，在finally中无法解锁。
			说明一：如果在lock方法与try代码块之间的方法调用抛出异常，那么无法解锁，造成其他线程无法成功获取锁。
			说明二：如果lock方法在try代码块之内，可能由于其他方法抛出异常，导致在finally代码块中，unlock对未加锁的对象解锁，它会调用AQS的tryRelease方法(取决于具体实现类)，抛出IllegalMonitorStateException异常。
			说明三：在Lock对象的lock方法实现中可能抛出unchecked异常，产生的后果与说明二相同。
			正例：
				Lock lock = new XxxLock();
				// ...
				lock.lock();
				try {
					doSomething();
					doOthers();
				} finally {
					lock.unlock();
				}
			反例：
				Lock lock = new XxxLock();
				// ... 
				try {
					// 如果此处抛出异常，则直接执行finally代码块
					doSomething();
					// 无论加锁是否成功，finally代码块都会执行
					lock.lock();
					doOthers();
				} finally {
					lock.unlock();
				}
		10、在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否持有锁。锁的释放规则与锁的阻塞等待方式相同。
			说明：Lock对象的unlock方法在执行时，它会调用AQS的tryRelease方法(取决于具体实现类)，如果当前线程不持有锁，则抛出IllegalMonitorStateException异常。
			正例：
				Lock lock = new XxxLock();
				// ...
				boolean isLocked = lock.tryLock();
				if (isLocked) {
					try {
						doSomething();
						doOthers();
					} finally {
						lock.unlock();
					}
				}
		11、并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用version作为更新依据。
			说明：如果每次访问冲突概率小于20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于3次。
		12、多线程并行处理定时任务时，Timer运行多个TimerTask时，只要其中之一没有捕获抛出的异常，其他任务便会自动终止运行，如果处理定时任务时使用ScheduledExecutorService则没有这个问题。
		13、资金相关的金融敏感信息，使用悲观锁策略。
			说明：乐观锁在获得锁的同时已经完成了更新操作，检验逻辑容易出现漏洞，另外，乐观锁对冲突的解决策略有较复杂的要求，处理不当容易造成系统压力或数据异常，所以资金相关的金融敏感信息不建议使用乐观锁更新。
		14、使用CountDownLatch进行异步转同步操作，每个线程退出前必须调用countDown方法，线程执行代码注意catch异常，确保countDown方法被执行到，避免主线程无法执行至await方法，直到超时才返回结果。
			说明：注意，子线程抛出异常堆栈，不能在主线程try-catch到。
		15、避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一个seed导致性能下降。
			说明：Random实例包括java.util.Random的实例或者Math.random()的方式。
			正例：在JDK7之后，可以直接使用API ThreadLocalRandom，而在JDK7之前，需要编码保证每个线程持有一个实例。
		16、在并发场景下，通过双重检查锁(double-checked locking)实现延迟初始化的优化问题隐患(可参考 The "Double-Checked Locking is Broken" Declaration)，推荐解决方案中较简单一种(适用于JDK5及以上版本)，将目标属性声明为volatile类型。
		17、volatile解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。
			说明：如果是count++操作，使用如下类实现：AtomicInteger count = new AtomicInteger(); count.addAndGet(1);如果是JDK8，推荐使用LongAdder对象，比AtomicLong性能更好(减少乐观锁的重试次数)。
		18、HashMap在容量不够尽兴resize时由于高并发可能出现死链，导致CPU飙升，在开发过程中可以使用其他数据结构或加锁来规避此风险。
		19、ThreadLocal对象使用static修饰，ThreadLocal无法解决共享对象的更新问题。
			说明：这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享次静态变量，也就是说在类第一次被使用时加载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。

	(七)控制语句
		1、在一个switch块内，每个case要么通过continue/break/return等来终止，要么注释说明程序将执行到哪一个case为止；在一个switch块内，都必须包含一个default语句并且放在最后，即使它什么代码块也没有。
			说明：注意break是退出switch语句块，而return是退出方法体。
		2、当switch括号内的类型变量为String并且此变量为外部参数时，必须先进行null判断。
			反例：猜猜下面的代码输出是什么？
				public class SwitchString {
					public static void main(String[] args) {
						method(null);
					}

					public static void method(String param) {
						switch(param) {
							// 肯定不是进入这里
							case "sth":
								System.out.println("it's sth");
								break;
							// 也不是进入这里
							case "null":
								System.out.ptintln("it's null");
								break;
							// 也不是进入这里
							default:
								System.out,println("default");	
						}
					}
				}
		3、在if/else/for/while/do语句中必须只用大括号。
			说明：即使只有一行代码，避免采用单行的编码方式:：if(condition) statements;
		4、在高并发场景中，避免使用"等于"判断作为终端或退出的条件。
			说明：如果并发控制没有处理好，容易产生等值判断被"击穿"的情况，使用大于或小于的区间判断条件来代替。
			反例：判断剩余奖品等于0时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。
		5、表达异常的分支时，少用if-else方式，这种方式可以改写成：
			if (condition) {
				...
				return obj;
			}
			// 接着写else的业务逻辑代码;
			说明：如果非使用if()...else if()...else...方式表达逻辑，避免后续代码维护困难，请勿超过3层。
			正例：超过3层的if-else的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句即代码逻辑先考虑失败、异常、中断、退出等直接返回的情况，以方法多个出口的方式，解决代码中判断分支嵌套的问题，这是逆向思维的体现。
			示例如下：
				public void findBoyfridend(Man man) {
					if (man.isUgly()) {
						System.out.println("本姑娘是外貌协会的资深会员");
						return;
					}

					if (man.isPoor()) {
						System.out.println("贫贱夫妻百事哀");
						return;
					}

					if (man.isBadTemper()) {
						System.out.println("银河有多远，你就给我滚多远");
						return;
					}

					System.out.println("可以先交往一段时间看看");
				}
		6、除常用方法(如getXxx/isXxx)等外，不要在条件判断中执行其他复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。
			说明：很多if语句内的逻辑表达式相当复杂，与、或、取反混合运算，甚至各种方法纵深调用，理解成本非常高。如果赋值一个非常好理解的布尔变量名字，则是件令人爽心悦目的事情。
			正例：
				// 伪代码如下
				final boolean existed = (file.open(fileName, "w") != null) && (...) || (...);
				if (existed) {
					...
				}
			反例：
				public final void acquire(long arg) {
					if (!tryAcquire(arg) && acquireQueued(addWrite(Node.EXCLUSIVE), arg)) {
						selfInterrupt();
					}
				}
		7、不要在其他表达式(尤其是条件表达式)中，插入赋值语句。
			说明：赋值点类似于人体的穴位，对于代码的理解至关重要，所以赋值语句需要清晰地单独成为一行。
			反例：
				public Lock getLock(boolean fair) {
					// 算术表达式中出现赋值操作，容易忽略count值已经被改变
					threshold = (count = Integer.MAX_VALUE) - 1;
					// 条件表达式出现赋值操作，容易误认为是sync==fair
					return (sync = fair) ? new FairSync() : new NonfairSync();
		8、循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的try-catch操作(这个try-catch是否可以移至循环体外)。
		9、避免采用取反逻辑运算符。
			说明：取反逻辑不利于快速理解，并且取反逻辑写法必然存在杜勇的正向逻辑写法。
		10、接口入参保护，这种场景常见的是用作批量操作的接口。
		11、下列情形，需要进行参数校验：
			a. 调用频次低的方法。
			b. 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。
			c. 需要极高稳定性和可用性的方法。
			d. 对外提供的开放接口，不管是RPC/API/HTTP接口。
			e. 敏感权限入口。
		12、下列情形，不需要进行参数校验：
			a. 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。
			b. 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般DAO层与Service层都在同一个应用中，部署在同一台服务器中，所以DAO的参数校验，可以省略。
			c. 被声明成private只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。
	(八)注释规约
		1、类、类属性、类方法的注释必须使用Javadoc规范，使用/**内容*/格式，不得使用// xxx方法。
			说明：在IDE编辑窗口中，Javadoc方法会提示相关注释，生成Javadoc可以正确输出相应注释；在IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的一一，提高阅读效率。
		2、所有的抽象方法(包括接口中的方法)必须要用Javadoc注释、除了返回值、参数、异常说明外，还必须支出该方法做什么事情，实现什么功能。
			说明：对子类的实现要求，或者调用注意事项，请一并说明。
		3、所有的类都必须添加创建者和创建日期。
		4、方法内部单行注释，在注释语句上方另起一行，使用//注释。方法内部多行注释使用/**/，注意与代码对齐。
		5、所有的枚举类型字段必须要有注释，说明每个数据项的用途。
		6、与其"半吊子"英文来注释，不如中文注释把问题说清楚。专有名词与关键字保持英文原文即可。
			反例："TCP连接超时"解释成"传输控制协议超连接超时"，理解反而费脑筋。
		7、代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。
			说明：代码与注释更新不同步，就想路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。
		8、谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。
			说明：代码被注释掉两种可能性：a. 后续会恢复此段代码逻辑；b. 永久不用。前者如果如果没有备注信息，难以知晓注释动机。
		9、对于注释的要求：第一、能够准确反映设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。
		10、好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。
		11、特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。
			a. 待办事宜(TODO)：(标记人，标记时间，[预计处理时间])
				表示需要是实现，但目前还未实现的功能。这实际上是一个Javadoc的标签，目前的Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法(因为它是一个Javadoc标签)。
			b. 错误，不能工作(FIXME)：(标记人，标记时间，[预计处理时间])
				在注释中用FIXME标记某代码是错误的，而且不能工作，需要及时纠正的情况。
	(九)其它
		1、在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。
			说明：不要在方法体内定义：Pattern pattern = Pattern.compile("规则");
		2、velocity调用POJO类的属性时，直接使用属性名取值即可，模板引擎会自动按规范调用POJO的getXxx()，如果是boolean基本数据类型变量(boolean命名不需要加is前缀)，会自动调用isXxx()方法。
			说明：注意如果是Boolean包装类对象，优先调用getXxx()的方法。
		3、后台输送给页面的变量必须加$!{var}---中间的感叹号。
			说明：如果var等于null或者不存在，那么${var}会直接显示在页面上。
		4、注意Math.random()这个方法返回的是double类型，注意取值的范围0<=x<1(能够取到零值，注意除零异常)，如果想获取整数类型的随机数，不要将x放大10的若干倍然后取整，直接使用Random对象的nextInt或者nextLong方法。
		5、获取当前毫秒数System.currentTimeMillis();而不是new Date().getTime();
			说明：如果想获取更加精确的纳秒级时间值，使用System.nanoTime()的方式。在JDK8中，针对统计时间等场景，推荐使用Instant类。
		6、日期格式化时，传入Pattern中表示年份统一使用小写的y。
			说明：日期格式化时，yyyy表示当天所在的年，而大写代码是week in which year(JDK7之后引入的概念)，意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的YYYY就是下一年。另外需要注意：
				a. 表示月份是大写的M；
				b. 表示分钟是小写的m；
				c. 24小时制的是大写的H;
				d. 12小时制的是小写的h。
		7、不要在视图模板中加入任何复杂的逻辑。
			说明：根据MVC理论，视图的职责是展示，不要抢模型和控制器的活。
		8、任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。
		9、及时清理不再使用的代码段或配置信息。
			说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。
			正例：对于暂时被注释掉，后续可能恢复使用的代码片断，在注释上方，统一规定使用三个斜杠(///)来说明注释掉代码的理由。