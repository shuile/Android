六、文件与数据库
	1、任何时候不要硬编码文件路劲，请使用Android文件系统API访问。
		说明：
		Android应用提供内部和外部存储，分别用于存放应用自身数据以及应用产生的用户数据。可以通过相关API接口获取对应的目录，进行文件操作。
		android.os.Environment getExternalStorageDirectory()
		android.os.Environment getExternalStoragePublicDirectory()
		android.os.Context getFilesDir()
		android.os.Context getCacheDir()
		正例：
			public File getDir(String alName) {
				File file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), alName);
				if (!file.mkdirs()) {
					Log.e(LOG_TAG, "Directory not created");
				}
				return file;
			}
		反例：
			public File getDir(String alName) {
				// 任何时候都不要硬编码文件路劲，这不仅存在安全隐患，也让app更容易出现适配问题
				File file = new File("/mnt/sdcard/Download/Album", alName);
				if(!file.mkdirs()) {
					Log.e(LOG_TAG, "Directory not created");
				}
				return file;
			}
	2、当使用外部存储时，必须检查外部存储的可用性。
		正例：
			// 读/写检查
			public boolean isExternalStorageWritable() {
				String state = Environment.getExternalStorageState();
				if (Environment.MEDIA_MOUNTED.equals(state)) {
					return true;
				}
				return false;
			}
			// 只读检查
			public boolean isExternalStorageReadable() {
				String state = Environment.getExternalStorageState();
				if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
					return true;
				}
				return false;
			}
	3、应用间共享文件时，不要通过放宽文件系统权限的方式去实现，而应使用FileProvider。
		正例：
			<!--AndroidManifest.xml-->
			<manifest>
				...
				<application>
					...
					<provider
						android:name="android.support.v4.content.FileProvider"
						android:authorities="com.example.fileprovider"
						android:exported="false"
						android:grantUriPermissions="true">
						<meta-data 
							android:name="android.support.FILE_PROVIDER_PATHS"
							android:resource="@xml/provider_paths"/>
					</provider>
					...
				</application>
			</manifest>
			<!--res/xml/provider_paths.xml-->
			<paths>
				<file-paths path="album/" name="myimages" />
			</paths>

			void getAlbumImage(String imagePath) {
				File image = new File(imagePath);
				Intent getAlbumImageIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
				Uri imageUri = FileProvider.getUriForFile(this, "com.example.provider", image);
				getAlbumImageIntent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
				startActivityForresult(getAlbumImageIntent, REQUEST_GET_ALBUMIMAGE);
			}
		反例：
			void getAlbumImage(String imagePath) {
				File image = new File(imagePath);
				Intent getAlbumImageIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
				// 不要使用file://的URI分享文件给别的应用，包括但不限于Intent
				getAlbumIamgeIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(image));
				startActivityForResult(getAlbumImageIntent, REQURST_GET_ALBUMIMAGE);
			}
	4、SharedPreference中只能存储简单数据类型(int, boolean,String等)，复杂数据类型建议使用文件、数据库等其他方式存储。
		正例:
			public void updateSettings() {
				SharedPreferences mySharedPreferences = getSharedPreferences("settings", Activity.MODE_PRIVATE);
				SharedPreferences.Editor editor = mySharedPreferences.edit();
				editor.putString("id", "foo");
				editor.putString("nick", "bar");
				// 不要把复杂数据类型转成String存储
				editor.apply();
			}
	5、SharedPreference提交数据时，尽量使用Editor apply()，而非Editor commit()。一般来讲，晋档需要确定提交结果，并据此有后续操作时，才使用Editor commit()。
		说明：
			SharedPreference相关修改使用apply方法进行提交会先写入内存，然后异步写入磁盘，commit方法是直接写入磁盘。如果操作频繁的话apply性能会优于commit，apply会将最后修改内容写入磁盘。但是如果希望立即获取存储操作的结果，并据此做相应的其他操作，应用使用commit。
		正例：
			public void updateSettingsAsync() {
				SharedPreferences mySharedPreferences = getSharedPreferences("settings", Activity.MODE_PRIVATE);
				SharedPreferences.Editor editor = mySharedPreferences.edit();
				editor.pubString("id", "foo");
				editor.apply();
			}

			public void updateSetitngs() {
				SharedPreferences mySharedPreferences = getSharedPreferences("settings", Activity.MODE_PRIVATE);
				SharedPreferences.Editor editor = mySharedPreferences.edit();
				editor.putString("id", "foo");
				if(!editor.commit()) {
					Log.e(LOG_TAG, "Failed to commit setting changes");
				}
			}
	6、数据库Cursor必须确保使用完后关闭，以免内存泄漏。
		说明：
			Cursor是对数据库查询结果集管理的一个类，当查询的结果集较小时，消耗内存不易察觉。但是当结果集较大，长时间重复操作会导致内存消耗过大，需要开发者在操作完成后手动关闭Cursor。
			数据库Cursor在创建及使用时，可能发生各种异常，无论程序是否正常结束，必须在最后确保Cursor正确关闭，以避免内存泄漏。同时，如果Cursor的使用还牵涉多线程场景，那么需要自行保证操作同步。
		正例：
			public void handlePhotos(SQLiteDatabase db, String userId) {
				Cursor cursor;
				try {
					cursor = db.query(TUserPhoto, new String[]{"userId", "content"}, "userId=?", new String[]{userId}, null, null, null);
					while(cursor.moveToNext()) {
						// TODO
					}
				} catch (Exception e) {
					// TODO
				} finall {
					if (cursor != null) {
						cursor.close();
					}
				}
			}
		反例：
			public void handlePhotos(SQLiteDatanase db, String userId) {
				Cursor cursor = db.quesr(TUserPhoto, new String[]{"userId", "content"}, "userId=?", new String[]{userId}, null, null, null);
				while(cursor.moveToNext()) {
					// TODO
				}
				// 不能放任cursor不关闭
			}
	7、多线程操作写入数据库时，需要使用事务，以避免出现同步问题。
		说明：
			通过SQLiteOpenHelper获取数据库SQLiteDatabase实例，Helper中会自动缓存已经打开的SQLiteDatabase实例，单个App中应使用SQLiteOpenHelper的单例模式确保数据库连接唯一。由于SQLite自身是数据库级锁，单个数据库操作是保证线程安全的(不能同时写入)，transaction是一次原子操作，因此事务中的操作时线程安全的。
			若同时打开多个数据库连接，并通过多线程写入数据库，会导致数据库异常，提示数据库已被锁住。
		正例：
			public void insertUserPhoto(SQLiteDatabase db, String userId, String content) {
				ContentValues cv = new ContentValues();
				cv.put("userId", userId);
				cv.put("content", content);
				db.beginTransaction();
				try {
					db.insert(TUserPhoto, null, cv);
					// 其他操作
					db.setTransactionSuccessful();
				} catch (Exception e) {
					// TODO
				} finally {
					db.endTransaction();
				}
			}
		反例：
			public void insertUserPhoto(SQLiteDatabase db, String userId, String content) {
				ContentValues cv = new ContentValues();
				cv.put("userId", userId);
				cv.put("content", content);
				db.insert(TUserPhoto, null, cv);
			}
	8、大数据写入数据库时，请使用事务或其他能够提高I/O效率的机制，保证执行速度。
		正例：
			public void insertBulk(SQLiteDatabase db, ArrayList<UserInfo> users) {
				db.beginTransaction();
				try {
					for (int i = 0; i <users.size(); i++)  {
						ContentValues cv = new ContentValues();
						cv.put("userId", users[i].userId);
						cv.put("content", users[i].content);
						db.insert(TUserPhoto, null, cv);
					}
					// 其他操作
					db.setTransactionSuccessful();
				} catch (Exception e) {
					// TODO
				} finally {
					db.endTransaction();
				}
			}
	9、执行SQL语句时，应使用SQLiteDatabase insert()、update()、delete()，不要使用SQLiteDatabase execSQL()，以免SQL注入风险。
		正例：
			public int updateUserPhoto(SQLiteDatabase db, String userId, String content) {
				ContentValues cv = new Contentvalues();
				cv.put("content", content);
				Sting[] args = {String.valueOf(userId)};
				return db.update(TUserPhoto, cv, "userId=?", args);
			}
		反例：
			public void updateUserPhoto(SQLiteDatabase db, String userId, String content) {
				String sqlStmt = String.format("UPDATE %s SET content=%s WHERE userId=%s", TUserPhoto, userid, content);
				// 请提高安全意识，不要直接执行字符串作为SQL语句
				db.execSQL(sqlStmt);
			}
	10、如果ContentProvider管理的数据存储在SQL数据库中，应该避免将不受信任的外部数据直接拼接在原始SQL语句中。
		正例：
			// 使用一个可替换参数
			String mSelectionClause = "var=?";
			String[] selectionArgs = {""};
			selectionArgs[0] = mUserInput;
		反例：
			// 拼接用户数据内容和别名
			String mSelectionClause = "var=" + mUserInput;