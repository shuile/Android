三、Android组件
	Android基本组件指Activity、Fragment、Service、BroadcastReceiver、ContentProvider等等。
	1、Activity间的数据通信，对于数据量比较大的，避免使用Intent+Pareclable的方式，可以考虑EventBus等替代方案，以免造成TranscationTooLargeException。
	2、Activity onSaveInstanceSatte()方法不是Activity生命周期方法，也不保证一定会被调用。它是用来在Activity被意外销毁时保存UI状态的，只能用于临时性数据，例如UI控件的属性等，不能跟数据的持久化存储混为一谈。持久化存储应该在Activity onPause/onStop中实行。
	3、Activity间通过隐式Intent的跳转，在发出Intent之前必须通过resolveActivity检查，避免找不到合适的调用组件，造成ActivityNotFoundException的异常。
		正例:
			public void viewUrl(String url, String mimeType) {
				Intent intent = new Intent(Intent.ACTION_VIEW);
				intent.setDataAndType(Uri.parse(url), mimeType);
				if (getPackageManager().resolveActivity(intent, PakageManager.MATCH_DEFAULT_ONLY) != null) {
					startActivity(intent);
				} else {
					// 找不到指定的Activity
				}
			}
		反例:
			Intent intent = new Intent;
			intent.setAction("com.example.DemoIntent");
			try {
				startActivity(intent);
			} catch (ActivityNotFoundException e) {
				e.printStackTrace();
			}
	4、避免在Service onStartCommand() / onBind()方法中执行耗时操作，如果确实有需求，应改用IntentService或采用其他异步机制完成。
		正例:
			public class MainActivity extends Activity {
				@Override
				public void onCreate(Bundle savedInstanceState) {
					super.onCreate(savedInstanceState);
					setContentView(R.layout.main);
				}

				public void startIntentService(View source) {
					Intent intent = new Intent(this, MyIntentService.class);
					startService(intent);
				}
			}

			public class MyIntentService extend IntentService {
				public MyIntentService() {
					super("MyIntentService");
				}

				@Override
				public void onHandleIntent(Intent intent) {
					synchronized(this) {
						try {
							......
						} catch(Exception e) {

						}
					}
				}
			}
	5、避免在BroadcastReceiver onReceive()中执行耗时操作，如果有耗时皂搓，应该创建IntentService完成，而不应该在BroadcastReceiver内创建子线程去操作。
		说明:
		由于该方法是在主线程执行，如果执行耗时操作会导致UI不流畅。可以使用IntentService、创建HandlerThread或者调用Context registerReceiver(BroadcastReceiver, IntentFilter, String, Handler)方法等方式，在其他Worker线程执行onReceive方法。BroadcastReceiver onReceive()方法耗时超过10秒钟，可能会被系统杀死。
			正例:
				IntentFilter filter = new IntentFilter();
				filter.addAction(LOGIN_SUCCESS);
				this.registerReceiver(mBroadcastReceiver, filter);
				mBroadcastReceiver = new BroadcastReceiver() {
					@Override
					public void onReceive(Context context, Intent intent) {
						Intent userHomeIntent = new Intent();
						userHomeIntent.setClass(this, UserHomeService.class);
						this.startService(userHomeIntent);
					}
				}
			反例:
				mBroadcastReceiver = new BroadcastReceiver() {
					@Override
					public void onReceive(Context context, Intent intent) {
						MyDatabaseHelper myDB = new MyDatabaseHelper(context);
						myDB.initData();
						// have some database operation here
					}
				}
	6、避免适应隐式Intent广播敏感信息，信息可能被其他注册了对应BroadcastReceiver的App接收。
		说明:
		通过Context sendBroadcast()发送的隐式广播会被所有感兴趣的receiver接收，恶意应用注册监听广播的receiver可能会获取到Intent中传递的敏感信息，并进行其他危险操作。如果发送的广播使用Context sendOrderedBroadcast()方法发送的有序广播，优先级较高的恶意receiver可能直接丢弃该广播，造成服务不可用，或者想广播结果塞入恶意数据。
		如果广播仅限于应用内，则可以使用LocalBroadcastManager sendBroadcast()实现，避免敏感信息外泄和Intent拦截的风险。
		正例:
			Intent intent = new Intent("my_sensitive-event");
			intent.putExtra("event", "this is a test event");
			LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
		反例:
			Intent intent = new Intent();
			intent.setAction("com.sample.action.server_running");
			intent.putExtra("local_ip", ip);
			intent.putExtra("port", port);
			intent.putExtra("code", code);
			intent.putExtra("connected", connected);
			intent.putExtra("pwd_predefined", pwd);
			if(!TextUtils.isEmpty(usr)) {
				intent.putExtra("connected_usr", usr);
			}
			context.sendBroadcast(intent);
			以上广播可能被其他应用的如下receiver接收导致敏感信息泄漏
			final class MyReceiver extends BroadcastReceiver {
				public final void onReceive(Context context, Intent intent) {
					if (intent != null && intent.getAction() != null) {
						String s = intent.getAction();
						if (s.equals("com.sample.action.server_running")) {
							String ip = intent.getStringExtra("local_ip");
							String code = intent.getStringExtra("code");
							int port = intent.getIntExtra("port", 8888);
							boolean status = intent.getBooleanExtra("connected", false);
						}
					}
				}
			}
	7、添加Fragment时，确保FragmentTransaction commit在Activity onPostResume()或者FragmentActivity onResumeFragments()内调用。不要随意使用FragmentTransaction commitAllowingStateLoss来替代，任何commitAllowingStateLoss()的使用必须经过code review，确保无负面影响。
		说明：
		Activity可能因为各种原因被销毁，Android支持页面被销毁前通过Activity onSaveInstanceState()保存自己的状态。但如果FragmentTransaction.commit()发生在Activity状态保存之后，就会导致Activity重建、恢复状态时无法还原页面状态，从而可能出错。为了避免给用户造成不好的体验，系统会抛出IllegalStateExceptionStateLoss异常。推荐的做法是在Activity的onPostResume()或者onResumeFragments()(对FragmentActivity)里执行FragmentTransaction.commit(),如果有必要也可在onCreate()里执行。不要随意改用FragmentTransaction.commitAllowingStateLoss()或者直接使用try-catch避免crash，这不是问题的根本解决之道，当前进挡你确认Activity重建、恢复状态时，本次commit丢失不会造成影响时才可这么做。
		正例:
			public class MainActivity extends FragmentActivity {
				FragmentManger fragmentManager;
				@Override
				protected void onCreate(Bundle savedInstanceState) {
					super.onCreate(savedInstanceState);
					setContentView(R.layou.activity_main);
					fragmentManager = getSupportFragmentManager();
					FragmentTransaction ft = fragmentManager.beginTransaction();
					MyFragment fragment = new MyFragment();
					ft.replace(R.id.fragment_container, fragment);
					ft.commit();
				}
			}
		反例:
			public class MainActivity extends FragmentActivity {
				FragmentManager fragmentManager;
				@Override
				public void onSavedInstanceState(Bundle outState, PersistableBundle outPersistentState) {
					super.onSavedInstanceState(outState, outPersistentState);
					fragmentManager = new getSupportFragmentManager();
					FragmentTransaction ft = fragmentManager.beginTransaction();
					MyFragment fragment = new MyFragment();
					ft.replace(R.id.fragment_container, fragment);
					ft.commit();
				}
			}
	8、不要在Activity onDestroy()内执行释放资源的工作，例如一些工作线程的销毁和停止，因为onDestroy()执行的实际可能比较晚。可根据实际需要，在Activity onPause()/onStop()中结合isFInishing()的判断来执行。
	9、如非必须，避免使用嵌套的Fragment
		说明：
		嵌套Fragment是在Android API 17添加到SDK以及Support库中的功能，Fragment嵌套使用会有一些坑，容易出现bug，比较常见的问题有如下集中：
			a. onActivityResult()方法的处理错乱，内嵌的Fragment可能收不到该方法的回调，需要由宿主Fragment进行转发处理；
			b. 突变动画效果；
			c. 被继承的setRetainInstance()，导致在Fragment重建时多次触发不必要的逻辑。
		非必须的场景尽可能避免使用嵌套Fragment.
		正例：
			FragmentManager fragmentManager = getFragmentManager();
			Fragmnet fragment = fargmentManager.findFragmentByTag(FragmentB.TAG);
			if (null == fargment) {
				FragmentB fragmentB = new FragmentB();
				FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
				fragmentTransaction.add(R.id.fragment_container, fragmentB, FragmentB.TAG).commit();
			}
		反例：
			Fragment videoFragment = new VideoPlayerFragment();
			FragmentTransaction transaction = currentFragment.getChildFragmentManager().beginTransaction();
			transaction.add(R.id.video_fragment, videoFragment).commit();
	10、总是使用显示Intent启动或者绑定Service，且不要为服务声明IntentFilter，保证应用的安全性。如果确实需要使用饮食调用，则可为Service提供IntentFilter并从Intent中排除相应的组件名称，但必须搭配使用Intent setPackage()方法设置Intent的指定包名，这样可以充分消除目标服务的不确定性。
	11、Service需要多线程来并发处理多个请求，建议使用IntentService，可避免各种复杂的设置。
		说明：
		Service组件一般运行主线程，应当避免耗时操作，如果有耗时操作应该在Worker线程执行。可以使用IntentService执行后台任务。
		正例：
			public class SingleIntentService extends IntentService {
				public SingleIntentService() {
					super("single-service thread");
				}

				@Override
				protected void onHandleIntent(Intent intent) {
					try {
						......
					} catch(InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		反例：
			public class HelloService extends Service {
				......
				@Override
				public int onStartCommand(Intent intent, int flags, int startId) {
					Toast.makeText(this, "service starting", Toast.LENGTH_SHORT).show();
					new Thread(new Runnable() {
						@Override
						public void run() {
							// 操作语句
						}
					}).start();
					......
				}
			}
	12、对于只用于应用内的广播，优先使用LocalBroadcastManager来进行注册和发送，LocalBroadcastManager安全性更好，同时拥有更高的运行效率。
		说明：
		对于使用Context sendBroadcast()等方法发送全局广播的代码进行提示。如果该广播仅用于应用内，则可以使用LocalBroadcastManager来避免广播泄漏以及广播被拦截等问题，同时相对全局广播本地广播的更高效。
		正例：
			public class MainActivity extends ActionBarActivity {
				private MyReceiver receiver;
				private IntentFilter filter;
				private Context context;
				private static final String MY_BROADCAST_TAG = "com.example.localbroadcast";

				@Override
				protected void onCreate(Bundle savedInstanceState) {
					super.onCreate(savedInstanceState);
					context = this;
					setContentView(R.layout.actviity_main);
					receiver = new MyReceiver();
					filter = new IntentFilter();
					filter.addAction(MY_BROADCAST_TAG);
					Button button = findViewById(R.id.butotn);
					button.setOnClickListener(new View.OnClickListener() {
						@Override
						public void onClick(View view) {
							Intent intent = new Intent();
							intent.setAction(MY_BROADCAST_TAG);
							LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
						}
					});
				}

				@Override
				protected void onResume() {
					super.onResume();
					LocalBroadcastManager.getInstance(context).registerReceiver(receiver, filter);
				}

				@Override
				protected void onPause() {
					super.onPause();
					LocalBroadcastManager.getInstance(context).unregisterReceiver(receiver);
				}

				class MyReceiver extends BroadcastReceiver {
					@Override
					public void onReceive(Context arg0, Intent arg1) {
						// message received
					}
				}
			}
		反例：
			// In activity, sending broadcast
			Intent intent = new Intent("com.example.broadcastreceiver.SOME_ACTION");
			sendBroadcast(intent);
	13、当前Activity的onPause方法执行结束后才会创建(onCreate)或恢复(onRestart)别的Activity，所以在onPause方法中不适合做耗时较长的工作，这回影响到页面之间的跳转效率。
	14、Activity或者Fragment中动态注册BroadcastReceiver时，registerReceiver()和unregisterReceiver()要成对出现。
		说明：
		如果registerReceiver()和unregisterReceiver()不成对出现，则可能导致已经注册的receiver没有在合适的时机注销，导致内存泄漏，占用内存空间，家中SystemService负担。
		部分华为的机型会对receiver进行资源管控，单个应用注册过多receiver会触发管控模块抛出异常，应用直接崩溃。
		正例：
			public class MainActivity extends AppCompatActivity {
				private statc MyReceiver myReceiver = new MyReceiver();
				...
				@Override
				protected void onResume() {
					super.onResume();
					IntentFilter filter = new IntentFilter("com.example.myservice");
					registerReceiver(myReciever, filter);
				}

				@Override
				protected void onPause() {
					super.onPause();
					unregisterReceiver(myReceiver);
				}
				...
			}
		反例：
			public class MainActivity extends AppCompatActivity {
				private static MyReceiver myReceiver;

				@Override
				protected void onResume() {
					super.onResume();
					myReceiver = new MyReceiver();
					IntentFilter filter = new IntentFilter("com.example.myservice");
					registerReceiver(myReceiver, filter);
				}

				@Override
				protected void onDestroy() {
					super.onDestory();
					unregisterReceiver(myReceiver);
				}
			}
			Activity的生命周期不对应，可能出现多次onResume造成receiver注册多个，但最终只注销一个，其余receiver产生内存泄漏
	15、Android基础组件如果使用隐式调用，应在AndroidManifest.xml中使用<intent-filter>或在代码中使用IntentFilter增加过滤。
		说明：
		如果浏览器支持Intent Scheme Uri语法，如果过滤不当，那么恶意用户可能通过浏览器js代码进行一些恶意行为，比如盗取cookie等。如果使用了Intent.parseUri函数，获取的intent必须严格过滤。
		正例：
			// 将Intent scheme Uri 转换成intent对象
			Intent intent = Intent.parseUri(uri);
			// 禁止没有BROWSABLE category的情况下启动activity
			intent.addCategory("android.intent.category.BROWSABLE");
			intent.setComponent(null);
			intent.setSelector(null);
			// 使用intent启动activity
			context.startActivityIfNeeded(intent, -1);
		反例：
			Intent intent = new Intent.parseUri(uri.toString().trim().substring(15), 0);
			intent.addCategory("android.intent.category.BROWSABLE");
			context.startActivity(intent);